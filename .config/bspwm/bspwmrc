#!/usr/bin/env bash
#
# Bspwm configuration
#

source bootstrap.sh

include utils/color.sh
include utils/lemonbuddy.sh
include utils/x11.sh

bootstrap::finish

if ! bspc wm -g &>/dev/null; then
  exit 1
fi

if [[ -s "$BSPWM_STATE" ]]; then
  "$LOCAL_ETC/bspwm/bin/restore_state"; exit 0
fi

# Config vars {{{

size_border=1
size_gap=-1

pad=0

padding_top=$pad
padding_bottom=$pad
padding_left=$pad
padding_right=$pad

color_normal_border="#666666"
color_active_border="#666666"
color_focused_border="#cccccc"
color_presel_feedback="#888888"

[[ -e "${CURRENT_THEME}/bspwm" ]] && {
  source "${CURRENT_THEME}/bspwm"
}

# }}}
# General {{{

bspc config split_ratio "${setting_split_ratio:-0.5}"
bspc config focus_by_distance "${setting_focus_by_distance:-true}"
bspc config history_aware_focus "${setting_history_aware_focus:-true}"
bspc config focus_follows_pointer "${setting_focus_follows_pointer:-true}"
bspc config ignore_ewmh_focus "${setting_ignore_ewmh_focus:-true}"

# }}}
# Monitors and desktops {{{

if bspc query -M -m HDMI-1 >/dev/null; then
  bspc monitor eDP-1 --reset-desktops term web code ws_4 ws_5 ws_6 ws_7 ws_8 music irssi
  bspc monitor HDMI-1 --reset-desktops term web code ws_4 ws_5 ws_6 ws_7 ws_8 ws_9 ws_0
else
  bspc monitor eDP-1 --reset-desktops term web code ws_4 ws_5 ws_6 ws_7 ws_8 music irssi
fi

bspc config pointer_follows_monitor "${setting_pointer_follow_monitor:-true}"
bspc config remove_unplugged_monitors "${setting_remove_unplugged_monitors:-true}"

# }}}
# Appearance {{{

bspc config top_padding ${padding_top:-0}
bspc config bottom_padding ${padding_bottom:-0}
bspc config left_padding ${padding_left:-0}
bspc config right_padding ${padding_right:-0}

bspc config border_width ${size_border:-0}
bspc config window_gap ${size_gap:-0}

bspc config borderless_monocle "${setting_borderless_monocle:-true}"
bspc config gapless_monocle "${setting_gapless_monocle:-false}"
bspc config single_monocle "${setting_single_monocle:-true}"

bspc config normal_border_color $color_normal_border
bspc config active_border_color $color_active_border
bspc config focused_border_color $color_focused_border
bspc config presel_feedback_color $color_presel_feedback

for node in $(bspc query -N); do
  xprop -id "$node" &>/dev/null || continue
  bspc config -n "$node" border_width $size_border
  bspc config -n "$node" window_gap $size_gap
done ; unset node

for desktop in $(bspc query -D); do
  bspc config -d "$desktop" border_width $size_border
  bspc config -d "$desktop" window_gap $size_gap
done ; unset desktop

for monitor in $(bspc query -M); do
  bspc config -m "$monitor" border_width $size_border
done ; unset desktop

if [ -s "$HOME/.fehbg" ]; then
  source "$HOME/.fehbg" 2>/dev/null
elif [ -e "$HOME/.wallpapers/1.png" ]; then
  feh --bg-center --image-bg -B black "$HOME/.wallpapers/1.png"
fi

# }}}
# Rules {{{

bspc rule -a Lastpass "state=floating"
bspc rule -a Pcmanfm "state=floating"
bspc rule -a Gimp "state=floating"
bspc rule -a Steam "state=floating"
bspc rule -a Yad "state=floating"

bspc config external_rules_command "$LOCAL_ETC/bspwm/bin/external_rules"

# }}}

# Event listener :: monocle see-through fix {{{

# This routine is needed since, with true transparency, when in monocle mode
# all nodes in the desktop will be visible behind the focused node.
# And since the WM doesn't set the proper states (above, below, hidden, etc)
# I have to do it manually...

function push_window_state {
  while read -r id; do
    xsetprop --id="$id" --mode="${2:-replace}" --format=32a --propname=_NET_WM_STATE --value="$1" 2>/dev/null
  done
}

function pop_window_state {
  while read -r id; do
    xprop -id "$id" -remove _NET_WM_STATE 2>/dev/null
  done
}

# Only create the listener if the termite config uses a background color
# with an alpha value lower than 1.0
if egrep -q -o 'background.*rgba\(([0-9,]+){3}.*0?\.[0-9]+\)$' "${XDG_CONFIG_HOME}/termite/config"; then
  bspc subscribe desktop_layout node_focus | while read -r event; do
    if [[ $(bspc query -T -d | json layout | tr -d '"') == "monocle" ]]; then
      bspc query -N -n | pop_window_state _NET_WM_STATE_HIDDEN
      bspc query -N -n '.local.!focused' | push_window_state _NET_WM_STATE_HIDDEN
    else
      bspc query -N -d | pop_window_state _NET_WM_STATE_HIDDEN
    fi
  done &
fi

# }}}
# Event listener :: theme {{{

if [[ -n "$(type theme::event_listeners 2>/dev/null)" ]]; then
  theme::event_listeners 2>/dev/null &
fi

# }}}

# Lemonbuddy {{{

# TODO: Break out the lemonbuddy startup code to a custom script

if command -v lemonbuddy >/dev/null && [[ "${#lemonbuddy_bars[@]}" -gt 0 ]]; then
  { pgrep -f lemonbuddy_wrapper | awk '{print $1}' | xargs kill -9
    killall -9 -q lemonbuddy lemonbar xdrawrect
  } &>/dev/null

  config="${lemonbuddy_config:-${LOCAL_ETC}/lemonbuddy/bspwm.conf}"

  echo "Using lemonbuddy config: $config"

  for bar in "${lemonbuddy_bars[@]}"; do
    if ! [[ -e "$config" ]]; then
      echo "Lemonbuddy config '$config' does not exist, aborting..." >&2; break
    fi

    monitor="$(lemonbuddy "$bar" -c "$config" --dump=monitor)"

    if ! x11::monitor_connected "$monitor"; then
      echo "Skipping lemonbuddy bar '$bar' for disconnected monitor '$monitor'" >&2; continue
    fi

    bar_wmname=$(lemonbuddy "$bar" -c "$config" --print-wmname)

    if [[ "$bar_wmname" ]]; then
      echo "Got Lemonbuddy WM_NAME '$bar_wmname' for bar '$bar'"
    else
      echo "Could not get Lemonbuddy WM_NAME for bar '$bar', skipping..." >&2; continue
    fi

    if lemonbuddy -h | grep -q "pipe=FILE"; then
      lemonbuddy_wrapper "$bar" -c "$config" &
    else
      lemonbuddy "$bar" -c "$config" &
    fi

    if lemonbuddy -h | grep -q "restack"; then
      continue
    fi

    retries=0

    while (( retries++ < 10 )); do
      root_id=$(x11::monitor_root_wid "$monitor")
      bar_id=$(x11::wmname_wid "$bar_wmname")

      if [[ "$root_id" ]] && [[ "$bar_id" ]]; then
        printf "Restacking bar window... (root=%s bar=%s)\n" "$root_id" "$bar_id"
        xdo above -t "$root_id" "$bar_id"
        break
      else
        printf "Could not get id of root/bar window (root=%s bar=%s)... retrying in 1s\n" "$root_id" "$bar_id" >&2
        sleep 1
      fi
    done
  done
fi

# }}}

echo "bspwm configuration loaded..."

if [[ -n "$(type theme::post_bspwmrc 2>/dev/null)" ]]; then
  theme::post_bspwmrc 2>/dev/null &
fi
